PRAGMA foreign_keys = off;
BEGIN TRANSACTION;

DROP TABLE IF EXISTS Payment;
CREATE TABLE Payment(
	id INTEGER NOT NULL ON CONFLICT ABORT,
	paymentMethod TEXT NOT NULL ON CONFLICT ABORT,
	creditCardNumber INTEGER DEFAULT NULL, 
	
	PRIMARY KEY(id),
	CHECK(paymentMethod == 'Paypal' OR paymentMethod == 'Mastercard' OR paymentMethod == 'ShopCard'  OR paymentMethod == 'Visa')
);

DROP TABLE IF EXISTS Cart;
CREATE TABLE Cart(
	id INTEGER NOT NULL ON CONFLICT ABORT,
	paymentId INTEGER UNIQUE NOT NULL ON CONFLICT ABORT,,
    totalPrice INTEGER NOT NULL DEFAULT(0),
	
	PRIMARY KEY(id)
	FOREIGN KEY (paymentId) REFERENCES Payment(Id)	ON DELETE SET NULL	ON UPDATE CASCADE, 
);

DROP TABLE IF EXISTS Location;
CREATE TABLE Location(
  	id INTEGER NOT NULL ON CONFLICT ABORT,
  	postalCode TEXT NOT NULL ON CONFLICT ABORT, 
  	country TEXT NOT NULL ON CONFLICT ABORT,
	
  	PRIMARY KEY(id),
	UNIQUE(postalCode, country)
);

DROP TABLE IF EXISTS Company;
CREATE TABLE Company(
	id INTEGER NOT NULL ON CONFLICT ABORT,
  	name TEXT NOT NULL ON CONFLICT ABORT,
  	city TEXT NOT NULL ON CONFLICT ABORT, 
  	revenue INTEGER DEFAULT NULL, -- may be null as a privacy measure
  	
	PRIMARY KEY (id),
	UNIQUE(name, city)
);

DROP TABLE IF EXISTS CustomerDetails;
CREATE TABLE CustomerDetails(
	ssn INTEGER UNIQUE NOT NULL ON CONFLICT ABORT,
	birthDate DATE NOT NULL ON CONFLICT ABORT,
	name TEXT NOT NULL ON CONFLICT ABORT,
	
	PRIMARY KEY (ssn),
	CHECK (date('now')-birthDate > 18)
);


DROP TABLE IF EXISTS Customer;
CREATE  TABLE Customer( 
  	id INTEGER NOT NULL ON CONFLICT ABORT,
 	email TEXT NOT NULL ON CONFLICT ABORT, -- email is not unique!
 	ssn INTEGER UNIQUE NOT NULL ON CONFLICT ABORT, -- privacy measure
	
	PRIMARY KEY (Id)
	FOREIGN KEY (ssn) REFERENCES CustomerDetails(ssn)	ON DELETE SET NULL	ON UPDATE CASCADE,
);


DROP TABLE IF EXISTS Orders;
CREATE TABLE Orders(
	customerId INTEGER NOT NULL ON CONFLICT ABORT,
	cartId INTEGER NOT NULL ON CONFLICT ABORT,
	id INTEGER NOT NULL ON CONFLICT ABORT,
	orderDate DATE NOT NULL ON CONFLICT ABORT,
	totalPrice INTEGER NOT NULL ON CONFLICT ABORT,

	PRIMARY KEY(id)
	FOREIGN KEY (customerId) REFERENCES Customer(Id)	ON DELETE SET NULL	ON UPDATE CASCADE,
	FOREIGN KEY (cartId) REFERENCES Cart(id)			ON DELETE SET NULL	ON UPDATE CASCADE,
);


DROP TABLE IF EXISTS ProductDiscount;
CREATE TABLE ProductDiscount(
  	id INTEGER NOT NULL ON CONFLICT ABORT,
  	discount REAL DEFAULT 0 NOT NULL ON CONFLICT ABORT, -- If no discount then discount = 0
  	startDate INTEGER NOT NULL ON CONFLICT ABORT,
  	finishDate INTEGER NOT NULL ON CONFLICT ABORT,
	
  	PRIMARY KEY (Id),
	CHECK(finishDate > startDate),
	CHECK(discount >= 0 AND discount <= 1)
);


DROP TABLE IF EXISTS Product;
CREATE TABLE Product(
  	id INTEGER NOT NULL ON CONFLICT ABORT,
 	name TEXT NOT NULL ON CONFLICT ABORT,
	companyId INTEGER,
 	line TEXT NOT NULL ON CONFLICT ABORT,
	price INTEGER NOT NULL ON CONFLICT ABORT,
	discountId INTEGER DEFAULT(0), 
  	inStock BOOLEAN NOT NULL ON CONFLICT ABORT,
    storage INTEGER,
    almostSoldOut BOOLEAN NOT NULL DEFAULT('False'),
	
	PRIMARY KEY (id),
  	FOREIGN KEY (discountId) REFERENCES ProductDiscount(Id)		ON DELETE SET NULL	ON UPDATE CASCADE,
	FOREIGN KEY (companyId) REFERENCES Company(id)			    ON DELETE SET NULL	ON UPDATE CASCADE
);


DROP TABLE IF EXISTS ProductReview;
CREATE TABLE ProductReview(
	customerId INTEGER NOT NULL ON CONFLICT ABORT,
	productId INTEGER NOT NULL ON CONFLICT ABORT,
	rating INTEGER DEFAULT NULL, 
 	date DATE,
	
	PRIMARY KEY (customerId, productId),
	FOREIGN KEY (customerId) REFERENCES customer (Id)	ON DELETE SET NULL	ON UPDATE CASCADE,
	FOREIGN KEY (productId) REFERENCES Product (Id)		ON DELETE SET NULL	ON UPDATE CASCADE,
	CHECK(rating >= 1 AND rating <= 5)
);



DROP TABLE IF EXISTS QuantityOfProduct;
CREATE TABLE QuantityOfProduct(
  	productId INTEGER NOT NULL ON CONFLICT ABORT,,
  	orderId INTEGER NOT NULL ON CONFLICT ABORT,,
	quantity INTEGER DEFAULT 0 NOT NULL ON CONFLICT ABORT,
	
	PRIMARY KEY (productId, orderId ),
	FOREIGN KEY (productId) REFERENCES Product(id)	ON DELETE SET NULL	ON UPDATE CASCADE,
	FOREIGN KEY (orderId) REFERENCES Orders(id)		ON DELETE SET NULL	ON UPDATE CASCADE,
	CHECK(quantity > 0)
);



DROP TABLE IF EXISTS CustomerLocation;
CREATE TABLE CustomerLocation(
  	locationId INTEGER DEFAULT NULL, -- privacy measure
  	customerId INTEGER NOT NULL ON CONFLICT ABORT,
	
	PRIMARY KEY (customerId, locationId)
	FOREIGN KEY (locationId) REFERENCES Location(Id)		ON DELETE SET NULL	ON UPDATE CASCADE,
	FOREIGN KEY (customerId) REFERENCES Customer(Id)		ON DELETE SET NULL	ON UPDATE CASCADE,
);


DROP TABLE IF EXISTS Admin;
CREATE TABLE Admin(
  	customerId INTEGER,
  	employeeId INTEGER UNIQUE NOT NULL ON CONFLICT ABORT,
	sector TEXT	NOT NULL ON CONFLICT ABORT,
	jobTitle TEXT NOT NULL ON CONFLICT ABORT,
	
  	PRIMARY KEY(customerId)
	FOREIGN KEY (customerId) REFERENCES Customer(id)	ON DELETE SET NULL	ON UPDATE CASCADE,
);


COMMIT TRANSACTION;
PRAGMA foreign_keys = on;